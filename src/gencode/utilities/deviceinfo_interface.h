/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.1.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 2019年9月2日
 ***********************************************************************************************/

#ifndef DEVICEINFO_INTERFACE_H
#define DEVICEINFO_INTERFACE_H

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include "digitaltwin_interface_client.h"
#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"

#include "digitaltwin_client_helper.h"
#include "digitaltwin_serializer.h"
#include "parson.h"
#include "../ReButton_impl.h"

#ifdef __cplusplus
extern "C"
{
#endif

typedef enum DEVICEINFO_READONLY_PROPERTY_TAG
{
    DeviceInfo_MANUFACTURER_PROPERTY,
    DeviceInfo_MODEL_PROPERTY,
    DeviceInfo_SWVERSION_PROPERTY,
    DeviceInfo_OSNAME_PROPERTY,
    DeviceInfo_PROCESSORARCHITECTURE_PROPERTY,
    DeviceInfo_PROCESSORMANUFACTURER_PROPERTY,
    DeviceInfo_TOTALSTORAGE_PROPERTY,
    DeviceInfo_TOTALMEMORY_PROPERTY
} DEVICEINFO_PROPERTY;

// DigitalTwin interface name from service perspective.
static const char DeviceInfoInterfaceId[] = "urn:azureiot:DeviceManagement:DeviceInformation:1";
static const char DeviceInfoInterfaceInstanceName[] = "DeviceInfo";

// Telemetry names for this interface.

// Property names for this interface.

#define DeviceInfoInterface_ManufacturerProperty "manufacturer"

#define DeviceInfoInterface_ModelProperty "model"

#define DeviceInfoInterface_SwVersionProperty "swVersion"

#define DeviceInfoInterface_OsNameProperty "osName"

#define DeviceInfoInterface_ProcessorArchitectureProperty "processorArchitecture"

#define DeviceInfoInterface_ProcessorManufacturerProperty "processorManufacturer"

#define DeviceInfoInterface_TotalStorageProperty "totalStorage"

#define DeviceInfoInterface_TotalMemoryProperty "totalMemory"

// Command names for this interface

// Methods
DIGITALTWIN_INTERFACE_CLIENT_HANDLE DeviceInfoInterface_Create();

void DeviceInfoInterface_Close(DIGITALTWIN_INTERFACE_CLIENT_HANDLE digitalTwinInterfaceClientHandle);

DIGITALTWIN_CLIENT_RESULT DeviceInfoInterface_Property_ReportAll();

DIGITALTWIN_CLIENT_RESULT DeviceInfoInterface_Property_ReportManufacturer();

DIGITALTWIN_CLIENT_RESULT DeviceInfoInterface_Property_ReportModel();

DIGITALTWIN_CLIENT_RESULT DeviceInfoInterface_Property_ReportSwVersion();

DIGITALTWIN_CLIENT_RESULT DeviceInfoInterface_Property_ReportOsName();

DIGITALTWIN_CLIENT_RESULT DeviceInfoInterface_Property_ReportProcessorArchitecture();

DIGITALTWIN_CLIENT_RESULT DeviceInfoInterface_Property_ReportProcessorManufacturer();

DIGITALTWIN_CLIENT_RESULT DeviceInfoInterface_Property_ReportTotalStorage();

DIGITALTWIN_CLIENT_RESULT DeviceInfoInterface_Property_ReportTotalMemory();

#ifdef __cplusplus
}
#endif

#endif  // DEVICEINFO_INTERFACE_H
