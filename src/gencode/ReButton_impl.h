/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.1.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 2019年9月2日
 ***********************************************************************************************/

#ifndef REBUTTON_IMPL
#define REBUTTON_IMPL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

typedef enum PUSHBUTTON_ACTIONNUM_TAG
{
    PUSHBUTTON_ACTIONNUM_NOT_CONFIGURED,
    PUSHBUTTON_ACTIONNUM_SingleClick = 1,
    PUSHBUTTON_ACTIONNUM_DoubleClick = 2,
    PUSHBUTTON_ACTIONNUM_TripleClick = 3,
    PUSHBUTTON_ACTIONNUM_LongPress = 10,
    PUSHBUTTON_ACTIONNUM_SuperLongPress = 11,
    PUSHBUTTON_ACTIONNUM_ERROR
} PUSHBUTTON_ACTIONNUM;

// Device telemetries related APIs

double Battery_Telemetry_ReadBatteryVoltage();

PUSHBUTTON_ACTIONNUM PushButton_Telemetry_ReadActionNum();

char* PushButton_Telemetry_ReadMessage();

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName, const char* telemetryName);
void SendTelemetry_Error_Callback(const char* interfaceName, const char* telemetryName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* telemetryName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* telemetryName);

// Device properties related APIs

char* DeviceInfo_Property_GetManufacturer();

char* DeviceInfo_Property_GetModel();

char* DeviceInfo_Property_GetSwVersion();

char* DeviceInfo_Property_GetOsName();

char* DeviceInfo_Property_GetProcessorArchitecture();

char* DeviceInfo_Property_GetProcessorManufacturer();

long DeviceInfo_Property_GetTotalStorage();

long DeviceInfo_Property_GetTotalMemory();

// Device commands related APIs

// Custom

extern volatile int SendTelemetry_IncompleteCount;
extern volatile int ReportProperty_IncompleteCount;

#ifdef __cplusplus
}
#endif

#endif // REBUTTON_IMPL
