/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.1.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 2019年9月2日
 ***********************************************************************************************/

#ifndef REBUTTON_IMPL
#define REBUTTON_IMPL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

typedef enum PUSHBUTTON_ACTIONNUM_TAG
{
    PUSHBUTTON_ACTIONNUM_NOT_CONFIGURED,
    PUSHBUTTON_ACTIONNUM_SingleClick = 1,
    PUSHBUTTON_ACTIONNUM_DoubleClick = 2,
    PUSHBUTTON_ACTIONNUM_TripleClick = 3,
    PUSHBUTTON_ACTIONNUM_LongPress = 10,
    PUSHBUTTON_ACTIONNUM_SuperLongPress = 11,
    PUSHBUTTON_ACTIONNUM_ERROR
} PUSHBUTTON_ACTIONNUM;

// Device telemetries related APIs

double Battery_Telemetry_ReadBatteryVoltage();

PUSHBUTTON_ACTIONNUM PushButton_Telemetry_ReadActionNum();

char* PushButton_Telemetry_ReadMessage();

double TempHumidSensor_Telemetry_ReadTemperature();

double TempHumidSensor_Telemetry_ReadHumidity();

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName, const char* telemetryName);
void SendTelemetry_Error_Callback(const char* interfaceName, const char* telemetryName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* telemetryName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* telemetryName);

// Device properties related APIs

char* DeviceInfo_Property_GetManufacturer();

char* DeviceInfo_Property_GetModel();

char* DeviceInfo_Property_GetSwVersion();

char* DeviceInfo_Property_GetOsName();

char* DeviceInfo_Property_GetProcessorArchitecture();

char* DeviceInfo_Property_GetProcessorManufacturer();

long DeviceInfo_Property_GetTotalStorage();

long DeviceInfo_Property_GetTotalMemory();

// Device commands related APIs

// Custom

extern volatile int ReButton_Digital_Twin_Work_Flag;



#define ReButton_Twin_manufacture             (1<<0)
#define Rebutton_Twin_model                   (1<<1)
#define ReButton_Twin_swVersion               (1<<2)
#define ReButton_Twin_osName                  (1<<3)
#define ReButton_Twin_processorArchitecture   (1<<4)
#define ReButton_Twin_processorManufacturer   (1<<5)
#define ReButton_Twin_totalStorage            (1<<6)
#define ReButton_Twin_totalMemory             (1<<7)

#define ReButton_Telemetry_ActionNum          (1<<16)
#define ReButton_Telemetry_Message            (1<<17)
#define ReButton_Telemetry_batteryVoltage     (1<<18)
#define ReButton_Telemetry_temperature        (1<<19)
#define ReButton_Telemetry_humidity           (1<<20)

#define  ReButton_Twin_Flags ReButton_Twin_manufacture \
                           | Rebutton_Twin_model \
                           | ReButton_Twin_swVersion \
                           | ReButton_Twin_osName \
                           | ReButton_Twin_processorArchitecture \
                           | ReButton_Twin_processorManufacturer \
                           | ReButton_Twin_totalStorage \
                           | ReButton_Twin_totalMemory

#define ReButton_Telemetry_Flags ReButton_Telemetry_ActionNum \
                               | ReButton_Telemetry_Message \
                               | ReButton_Telemetry_batteryVoltage \
                               | ReButton_Telemetry_temperature \
                               | ReButton_Telemetry_humidity

#ifdef __cplusplus
}
#endif

#endif // REBUTTON_IMPL
